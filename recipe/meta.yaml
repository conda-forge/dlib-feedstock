{% set name = "dlib" %}
{% set version = "19.24.2" %}
{% set tag = "v" ~ ".".join(version.split(".")[:2]) %}

package:
  name: {{ name }}-split
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 2d4f618073bc6b297aa01ce05595a2d32b5b37e69cafd99f796e77346f6dcfb5

  patches:
    - lapack_sgetrf.patch      # [unix]
    - setup_cmake_args.patch
    - fix_libtools_error.patch  # [osx]
    - unvendor_pybind11.patch
    - do_not_try_cuda_test_compile.patch  # [linux and aarch64]

build:
  number: 4

outputs:
  - name: {{ name }}
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                # [cuda_compiler_version == "None"]
      # weigh down cpu implementation and give cuda preference
      track_features:
        - dlib-cpu                               # [cuda_compiler_version in (undefined, "None")]
      run_exports:
        - {{ pin_subpackage('dlib', max_pin='x.x') }}
    script: build-pkg.sh  # [not win]
    script: bld-pkg.bat   # [win]

    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
        - cmake
        - make  # [unix]
        - pkg-config
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - pybind11                               # [build_platform != target_platform]
      host:
        - cudnn                                  # [cuda_compiler_version != "None"]
        - nccl                                   # [cuda_compiler_version != "None" and linux]
        - libjpeg-turbo
        - libcblas  # [not win]
        - liblapack   # [not win]
        - libpng
        - numpy
        - pip
        - pybind11
        - python
        - sqlite  # [not win]
        - cuda-cudart-dev                           # [(cuda_compiler_version or "").startswith("12")]
        - libcublas-dev                             # [(cuda_compiler_version or "").startswith("12")]
        - cuda-nvcc-tools                           # [(cuda_compiler_version or "").startswith("12")]
        - cuda-nvcc-impl                            # [(cuda_compiler_version or "").startswith("12")]
      run:
        - {{ pin_compatible('numpy') }}
        - python
        - __cuda                                 # [cuda_compiler_version != "None"]

    test:
      files:
        - test_data/face.jpg
        - test_data/face.png
        - test_data/images.xml
        # contains test configurations including some skips for missing fixtures
        - setup.cfg
      source_files:
        - tools/python/test
      requires:
        - more-itertools
        - pillow
        - pip
        - pytest>=7
        - pytest-azurepipelines
        - tqdm

      imports:
        - dlib

      commands:
        - python -m pip check
        - python -m pytest tools/python/test

  # Help the linter to avoid errors on a package not having tests.
  {% set dlib_cpu_gpu = name + "-cpu" %}   # [cuda_compiler_version == "None"]
  {% set dlib_cpu_gpu = name + "-gpu" %}   # [cuda_compiler_version != "None"]
  - name: {{ dlib_cpu_gpu }}
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                                # [cuda_compiler_version == "None"]
    requirements:
      run:
        - {{ pin_subpackage('dlib', exact=True) }}
    test:
      imports:
        - dlib

about:
  home: http://dlib.net
  license: BSL-1.0
  license_file: dlib/LICENSE.txt
  summary: toolkit for making real world machine learning and data analysis applications
  dev_url: https://github.com/davisking/dlib
  doc_source_url: https://github.com/davisking/dlib/tree/{{ tag }}/docs
  description: |-
    Dlib is a modern C++ toolkit containing machine learning algorithms and tools
    for creating complex software in C++ to solve real world problems. See
    http://dlib.net for the main project documentation and API reference.

extra:
  recipe-maintainers:
    - patricksnape
    - aldanor
    - Tobias-Fischer
